# Copyright 2021 University of Li√®ge
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Main CMake file.
# Configure the compilation of the C++ core of CUPyDO and the Py wrapper.

CMAKE_MINIMUM_REQUIRED(VERSION 3.1)
PROJECT(CUPyDO)

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "")
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "")
MARK_AS_ADVANCED(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

IF(NOT CMAKE_BUILD_TYPE)
    SET( CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
ENDIF()

LIST(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMake")

# Options
OPTION(WITH_MPI "Build for parallel run" OFF)

# macros/fcts
INCLUDE(cupyMacros)

# -- C++11
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)

# Set specific compiler flags
MESSAGE(STATUS "CMAKE_CXX_COMPILER_ID=${CMAKE_CXX_COMPILER_ID}")
IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_BUILD_TYPE MATCHES Debug)
    # Add warnings during compilation when build type is Debug
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall - Wextra")
ENDIF()

# -- Search for Python
IF (CMAKE_VERSION VERSION_LESS 3.12.0)
    FIND_PACKAGE(PythonInterp 3.6 REQUIRED)
    FIND_PACKAGE(PythonLibs 3.6 REQUIRED)
ELSE()
    find_package (Python3 COMPONENTS Interpreter Development)
    # use Python3_ROOT_DIR if wrong python found (e.g. anaconda)
    SET(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
    SET(PYTHON_LIBRARIES ${Python3_LIBRARIES})
    SET(PYTHON_INCLUDE_PATH ${Python3_INCLUDE_DIRS}) 
    SET(PYTHONLIBS_VERSION_STRING ${Python3_VERSION})     
ENDIF()
MESSAGE(STATUS "PYTHON_EXECUTABLE:FILEPATH=${PYTHON_EXECUTABLE}")
MESSAGE(STATUS "PYTHON_LIBRARIES:FILEPATH=${PYTHON_LIBRARIES}")
MESSAGE(STATUS "PYTHON_INCLUDE_PATH:FILEPATH=${PYTHON_INCLUDE_PATH}")
MESSAGE(STATUS "PYTHON_FRAMEWORK_INCLUDES=${PYTHON_FRAMEWORK_INCLUDES}")
MESSAGE(STATUS "PYTHONLIBS_VERSION_STRING=${PYTHONLIBS_VERSION_STRING}")
MESSAGE(STATUS "Python_FRAMEWORKS=${Python_FRAMEWORKS}")
INCLUDE_DIRECTORIES( ${PYTHON_INCLUDE_PATH} )

# numpy
FIND_PACKAGE(NUMPY REQUIRED)
INCLUDE_DIRECTORIES( ${NUMPY_INCLUDE_DIR} )

# -- Search for SWIG
FIND_PACKAGE(SWIG REQUIRED)
IF(CMAKE_GENERATOR MATCHES "Visual Studio")
    # SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}/$(Configuration)/") # INSTALL does not work
    SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}")
ELSE()
    SET(CMAKE_SWIG_OUTDIR "${EXECUTABLE_OUTPUT_PATH}")
ENDIF()
MESSAGE(STATUS "CMAKE_SWIG_OUTDIR=${CMAKE_SWIG_OUTDIR}")

# Build for parallel run using MPI (default is OFF)
IF(WITH_MPI)
    FIND_PACKAGE(MPI REQUIRED)
    MESSAGE(STATUS "MPI_INCLUDE_PATH=${MPI_INCLUDE_PATH}")
    MESSAGE(STATUS "MPI_LIBRARIES=${MPI_LIBRARIES}")
    ADD_DEFINITIONS(-DHAVE_MPI)
    MESSAGE(STATUS "MPI_INCLUDE_PATH=${MPI_INCLUDE_PATH}")
    INCLUDE_DIRECTORIES( ${MPI_INCLUDE_PATH} )

    FIND_PACKAGE(PETSc REQUIRED)
    MESSAGE(STATUS "PETSC_INCLUDE_PATH=${PETSC_INCLUDE_PATH}")
    INCLUDE_DIRECTORIES( ${PETSC_INCLUDE_PATH} )

    FIND_PACKAGE(PETSc4Py REQUIRED)
    MESSAGE(STATUS "PETSC4PY_INCLUDE_DIR=${PETSC4PY_INCLUDE_DIR}")
    INCLUDE_DIRECTORIES( ${PETSC4PY_INCLUDE_DIR} )

    FIND_PACKAGE(Mpi4Py REQUIRED)
    MESSAGE(STATUS "MPI4PY_INCLUDE_DIR=${MPI4PY_INCLUDE_DIR}")
    INCLUDE_DIRECTORIES( ${MPI4PY_INCLUDE_DIR} )
ENDIF(WITH_MPI)

SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

#-------------------------------------------------------------
INCLUDE(${SWIG_USE_FILE})

INCLUDE_DIRECTORIES( ${PROJECT_SOURCE_DIR}/src )

FILE(GLOB SRCS src/*.h src/*.cpp)

FILE(GLOB ISRCS _src/*.i)

IF(WITH_MPI)
    SET(CMAKE_SWIG_FLAGS "-DHAVE_MPI")
ELSE()
    SET(CMAKE_SWIG_FLAGS "")
ENDIF()

SET_SOURCE_FILES_PROPERTIES(${ISRCS} PROPERTIES CPLUSPLUS ON)

SET(SWINCFLAGS -I${PROJECT_SOURCE_DIR} )

SET_SOURCE_FILES_PROPERTIES(${ISRCS} PROPERTIES SWIG_FLAGS "${SWINCFLAGS}")

IF(${CMAKE_VERSION} VERSION_LESS "3.8.0")
    SWIG_ADD_MODULE(CCupydo python ${ISRCS} ${SRCS})
ELSE()
    SWIG_ADD_LIBRARY(CCupydo
                     LANGUAGE python
                     SOURCES ${PROJECT_SOURCE_DIR}/_src/CCupydo.i ${SRCS})
ENDIF()

SWIG_LINK_LIBRARIES(CCupydo ${PYTHON_LIBRARIES} ${MPI_LIBRARIES} ${PETSC_LIBRARIES})

# --- Install ---
# note: [RB] this is not how INSTALL is supposed to be used!
SET(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}")
MESSAGE(STATUS "Installation directory : ${CMAKE_INSTALL_PREFIX}")

INSTALL_TARGETS(/ccupydo _CCupydo)
INSTALL_FILES(/ccupydo FILES "${CMAKE_SWIG_OUTDIR}/CCupydo.py")

# --- Enable CTest ---
ENABLE_TESTING()
ADD_SUBDIRECTORY(tests)


